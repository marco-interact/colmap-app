name: Deploy to Google Cloud Run

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: colmap-app
  REGION: us-central1
  FRONTEND_SERVICE: colmap-frontend
  WORKER_SERVICE: colmap-worker

jobs:
  deploy-worker:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as credential helper
      run: gcloud auth configure-docker

    - name: Build and push COLMAP worker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$WORKER_SERVICE ./gcp-deployment/colmap-worker
        docker push gcr.io/$PROJECT_ID/$WORKER_SERVICE

    - name: Deploy COLMAP worker to Cloud Run with GPU
      run: |
        gcloud run deploy $WORKER_SERVICE \
          --image gcr.io/$PROJECT_ID/$WORKER_SERVICE \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --memory 16Gi \
          --cpu 8 \
          --gpu type=nvidia-tesla-t4,count=1 \
          --timeout 3600 \
          --max-instances 5 \
          --min-instances 0

  deploy-frontend:
    if: github.ref == 'refs/heads/main'
    needs: deploy-worker
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build Next.js application
      run: npm run build

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as credential helper
      run: gcloud auth configure-docker

    - name: Get worker URL
      id: get_worker_url
      run: |
        WORKER_URL=$(gcloud run services describe $WORKER_SERVICE --region $REGION --format 'value(status.url)')
        echo "worker_url=$WORKER_URL" >> $GITHUB_OUTPUT

    - name: Build and push frontend image
      run: |
        echo "üîç Building frontend with worker URL: ${{ steps.get_worker_url.outputs.worker_url }}"
        docker build -t gcr.io/$PROJECT_ID/$FRONTEND_SERVICE \
          --build-arg NEXT_PUBLIC_COLMAP_WORKER_URL=${{ steps.get_worker_url.outputs.worker_url }} \
          --no-cache \
          -f Dockerfile.frontend .
        docker push gcr.io/$PROJECT_ID/$FRONTEND_SERVICE

    - name: Deploy frontend to Cloud Run
      run: |
        gcloud run deploy $FRONTEND_SERVICE \
          --image gcr.io/$PROJECT_ID/$FRONTEND_SERVICE \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --memory 2Gi \
          --cpu 1 \
          --port 8080 \
          --set-env-vars NODE_ENV=production,NEXT_PUBLIC_COLMAP_WORKER_URL=${{ steps.get_worker_url.outputs.worker_url }} \
          --max-instances 10 \
          --min-instances 0

    - name: Output URLs
      run: |
        echo "üöÄ Deployment Complete!"
        echo "Frontend URL: $(gcloud run services describe $FRONTEND_SERVICE --region $REGION --format 'value(status.url)')"
        echo "Worker URL: $(gcloud run services describe $WORKER_SERVICE --region $REGION --format 'value(status.url)')"

  test-deployment:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Build application (test)
      run: npm run build

    - name: Test Docker build (frontend)
      run: docker build -f Dockerfile.frontend -t test-frontend .

    - name: Test Docker build (worker)
      run: docker build -f ./gcp-deployment/colmap-worker/Dockerfile -t test-worker ./gcp-deployment/colmap-worker