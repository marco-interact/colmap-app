name: Deploy Frontend to Cloud Run

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'public/**'
      - 'package.json'
      - 'package-lock.json'
      - 'Dockerfile.frontend'
      - 'next.config.js'
      - 'tailwind.config.ts'
      - 'tsconfig.json'
  workflow_dispatch:

env:
  PROJECT_ID: colmap-app
  REGION: us-central1
  SERVICE_NAME: colmap-frontend

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Build Next.js application
      run: npm run build

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as credential helper
      run: gcloud auth configure-docker

    - name: Build and push frontend Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          -t gcr.io/$PROJECT_ID/$SERVICE_NAME:latest \
          -f Dockerfile.frontend .
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:latest

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --memory 2Gi \
          --cpu 1 \
          --port 8080 \
          --set-env-vars NODE_ENV=production \
          --max-instances 10 \
          --min-instances 0 \
          --timeout 300 \
          --concurrency 100

    - name: Get service URL
      id: get-url
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region $REGION --format 'value(status.url)')
        echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "üöÄ Frontend deployed successfully!"
        echo "üì± Service URL: $SERVICE_URL"

    - name: Run health check
      run: |
        SERVICE_URL="${{ steps.get-url.outputs.url }}"
        echo "‚è≥ Waiting for service to be ready..."
        sleep 30
        
        # Simple health check
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL" || echo "000")
        if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 404 ]; then
          echo "‚úÖ Health check passed! Service is responding (HTTP $HTTP_CODE)"
        else
          echo "‚ùå Health check failed! Service returned HTTP $HTTP_CODE"
          exit 1
        fi

    outputs:
      service-url: ${{ steps.get-url.outputs.url }}
