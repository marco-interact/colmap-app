name: Deploy Full Stack (Worker + Frontend)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_worker:
        description: 'Deploy Worker Service'
        required: false
        default: 'true'
        type: boolean
      deploy_frontend:
        description: 'Deploy Frontend Service'
        required: false
        default: 'true'
        type: boolean

env:
  PROJECT_ID: colmap-app
  REGION: us-central1
  WORKER_SERVICE: colmap-worker
  FRONTEND_SERVICE: colmap-frontend

jobs:
  deploy-worker:
    if: ${{ github.event.inputs.deploy_worker != 'false' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    outputs:
      worker-url: ${{ steps.get-worker-url.outputs.url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as credential helper
      run: gcloud auth configure-docker

    - name: Build and push worker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$WORKER_SERVICE:$GITHUB_SHA \
          -t gcr.io/$PROJECT_ID/$WORKER_SERVICE:latest \
          -f Dockerfile .
        docker push gcr.io/$PROJECT_ID/$WORKER_SERVICE:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/$WORKER_SERVICE:latest

    - name: Deploy worker to Cloud Run with GPU
      run: |
        gcloud run deploy $WORKER_SERVICE \
          --image gcr.io/$PROJECT_ID/$WORKER_SERVICE:$GITHUB_SHA \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --memory 8Gi \
          --cpu 4 \
          --gpu type=nvidia-tesla-t4,count=1 \
          --timeout 3600 \
          --max-instances 3 \
          --min-instances 0

    - name: Get worker URL
      id: get-worker-url
      run: |
        WORKER_URL=$(gcloud run services describe $WORKER_SERVICE --region $REGION --format 'value(status.url)')
        echo "url=$WORKER_URL" >> $GITHUB_OUTPUT
        echo "‚öôÔ∏è Worker URL: $WORKER_URL"

  deploy-frontend:
    if: ${{ github.event.inputs.deploy_frontend != 'false' }}
    needs: deploy-worker
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build Next.js application
      run: npm run build

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as credential helper
      run: gcloud auth configure-docker

    - name: Build and push frontend image
      env:
        WORKER_URL: ${{ needs.deploy-worker.outputs.worker-url }}
      run: |
        docker build -t gcr.io/$PROJECT_ID/$FRONTEND_SERVICE:$GITHUB_SHA \
          -t gcr.io/$PROJECT_ID/$FRONTEND_SERVICE:latest \
          --build-arg NEXT_PUBLIC_COLMAP_WORKER_URL="${WORKER_URL}" \
          -f Dockerfile.frontend .
        docker push gcr.io/$PROJECT_ID/$FRONTEND_SERVICE:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/$FRONTEND_SERVICE:latest

    - name: Deploy frontend to Cloud Run
      env:
        WORKER_URL: ${{ needs.deploy-worker.outputs.worker-url }}
      run: |
        gcloud run deploy $FRONTEND_SERVICE \
          --image gcr.io/$PROJECT_ID/$FRONTEND_SERVICE:$GITHUB_SHA \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --memory 2Gi \
          --cpu 1 \
          --port 8080 \
          --set-env-vars NODE_ENV=production,NEXT_PUBLIC_COLMAP_WORKER_URL="${WORKER_URL}" \
          --max-instances 10 \
          --min-instances 0

    - name: Get frontend URL
      id: get-frontend-url
      run: |
        FRONTEND_URL=$(gcloud run services describe $FRONTEND_SERVICE --region $REGION --format 'value(status.url)')
        echo "üì± Frontend URL: $FRONTEND_URL"

  integration-test:
    if: ${{ always() && (needs.deploy-worker.result == 'success' || needs.deploy-frontend.result == 'success') }}
    needs: [deploy-worker, deploy-frontend]
    runs-on: ubuntu-latest
    
    steps:
    - name: Wait for services to be ready
      run: |
        echo "‚è≥ Waiting for services to initialize..."
        sleep 60

    - name: Test worker service
      if: ${{ needs.deploy-worker.outputs.worker-url }}
      run: |
        WORKER_URL="${{ needs.deploy-worker.outputs.worker-url }}"
        echo "Testing worker at: $WORKER_URL"
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$WORKER_URL" || echo "000")
        if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 404 ]; then
          echo "‚úÖ Worker service is responding"
        else
          echo "‚ö†Ô∏è Worker service check inconclusive (HTTP $HTTP_CODE)"
        fi

    - name: Deployment Summary
      run: |
        echo "üéâ Deployment Summary:"
        echo "======================"
        if [ "${{ needs.deploy-worker.result }}" == "success" ]; then
          echo "‚úÖ Worker: ${{ needs.deploy-worker.outputs.worker-url }}"
        else
          echo "‚è≠Ô∏è Worker: Skipped or failed"
        fi
        if [ "${{ needs.deploy-frontend.result }}" == "success" ]; then
          echo "‚úÖ Frontend: Deployed successfully"
        else
          echo "‚è≠Ô∏è Frontend: Skipped or failed"
        fi
