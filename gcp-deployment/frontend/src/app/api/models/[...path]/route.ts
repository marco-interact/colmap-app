/**
 * API endpoint to serve 3D model files
 * Route: /api/models/[workspace]/[user]/[project]/[scan]/[type]/[filename]
 * This handles the proper file serving for the 3D viewer
 */

import { NextRequest, NextResponse } from 'next/server'
import { mockDB } from '@/lib/database/mockDatabase'
import { fileStorage } from '@/lib/services/fileStorage'
import fs from 'fs/promises'
import path from 'path'

export async function GET(
  request: NextRequest,
  { params }: { params: { path: string[] } }
) {
  try {
    const pathSegments = params.path
    
    // Expected path structure: [workspace]/[user]/[project]/[scan]/[type]/[filename]
    if (pathSegments.length !== 6) {
      return new NextResponse('Invalid path structure', { status: 400 })
    }

    const [workspaceId, userId, projectId, scanId, type, filename] = pathSegments

    // Validate the scan exists and belongs to the user
    const scan = mockDB.getScanById(scanId)
    if (!scan) {
      return new NextResponse('Scan not found', { status: 404 })
    }

    if (scan.workspace_id !== workspaceId || scan.user_id !== userId || scan.project_id !== projectId) {
      return new NextResponse('Access denied', { status: 403 })
    }

    // For demo purposes, serve the sample PLY file for any completed scan
    if (scan.status === 'completed') {
      // In production, this would serve the actual file from cloud storage
      // For now, serve the sample PLY file that exists in public/models/
      const sampleModelPath = path.join(process.cwd(), 'public', 'models', 'sample.ply')
      
      try {
        const modelBuffer = await fs.readFile(sampleModelPath)
        
        // Set appropriate headers for PLY files
        const headers = new Headers({
          'Content-Type': 'application/octet-stream',
          'Content-Disposition': `attachment; filename="${filename}"`,
          'Content-Length': modelBuffer.length.toString(),
          'Cache-Control': 'public, max-age=3600', // Cache for 1 hour
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Headers': 'Range',
          'Access-Control-Expose-Headers': 'Content-Length, Content-Range',
        })

        return new Response(new Uint8Array(modelBuffer), {
          status: 200,
          headers
        })
      } catch (error) {
        console.error('Error serving sample model file:', error)
        
        // If sample file doesn't exist, return a minimal PLY file
        const minimalPly = `ply
format ascii 1.0
comment Generated by COLMAP
element vertex 4
property float x
property float y
property float z
property uchar red
property uchar green  
property uchar blue
end_header
0.0 0.0 0.0 255 0 0
1.0 0.0 0.0 0 255 0
0.0 1.0 0.0 0 0 255
0.0 0.0 1.0 255 255 0
`
        
        return new NextResponse(minimalPly, {
          status: 200,
          headers: {
            'Content-Type': 'application/octet-stream',
            'Content-Disposition': `attachment; filename="${filename}"`,
            'Cache-Control': 'public, max-age=3600'
          }
        })
      }
    }

    return new NextResponse('Model not available', { status: 404 })
  } catch (error) {
    console.error('Error serving model file:', error)
    return new NextResponse('Internal Server Error', { status: 500 })
  }
}

// Handle CORS preflight requests
export async function OPTIONS(request: NextRequest) {
  return new NextResponse(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, OPTIONS',
      'Access-Control-Allow-Headers': 'Range, Content-Type',
    }
  })
}
