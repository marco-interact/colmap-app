version: '3.8'

services:
  # PostgreSQL Database - Staging
  postgres-staging:
    image: postgres:15
    container_name: 3d_platform_postgres_staging
    environment:
      POSTGRES_DB: 3d_platform_staging
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: staging_password_2024!
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    networks:
      - staging_network
    restart: unless-stopped

  # Redis Cache - Staging
  redis-staging:
    image: redis:7-alpine
    container_name: 3d_platform_redis_staging
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    volumes:
      - redis_staging_data:/data
    networks:
      - staging_network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Backend API - Staging
  backend-staging:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile
      target: production  # Use production build stage
    container_name: 3d_platform_backend_staging
    env_file:
      - ./env.staging
    environment:
      - POSTGRES_SERVER=postgres-staging
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=staging_password_2024!
      - POSTGRES_DB=3d_platform_staging
      - REDIS_URL=redis://redis-staging:6379/0
      - UPLOAD_DIR=/app/uploads
      - OUTPUT_DIR=/app/output
      - TEMP_DIR=/app/temp
      - COLMAP_WORKSPACE_DIR=/app/colmap_workspace
      - LOG_LEVEL=INFO
    volumes:
      - uploads_staging_data:/app/uploads
      - output_staging_data:/app/output
      - temp_staging_data:/app/temp
      - colmap_workspace_staging_data:/app/colmap_workspace
    ports:
      - "8001:8000"  # Different port for staging
    depends_on:
      - postgres-staging
      - redis-staging
    networks:
      - staging_network
    restart: unless-stopped
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker - Staging
  celery-worker-staging:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile
      target: production
    container_name: 3d_platform_celery_worker_staging
    env_file:
      - ./env.staging
    environment:
      - POSTGRES_SERVER=postgres-staging
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=staging_password_2024!
      - POSTGRES_DB=3d_platform_staging
      - REDIS_URL=redis://redis-staging:6379/0
      - UPLOAD_DIR=/app/uploads
      - OUTPUT_DIR=/app/output
      - TEMP_DIR=/app/temp
      - COLMAP_WORKSPACE_DIR=/app/colmap_workspace
    volumes:
      - uploads_staging_data:/app/uploads
      - output_staging_data:/app/output
      - temp_staging_data:/app/temp
      - colmap_workspace_staging_data:/app/colmap_workspace
    depends_on:
      - postgres-staging
      - redis-staging
      - backend-staging
    networks:
      - staging_network
    restart: unless-stopped
    command: celery -A app.celery_app worker --loglevel=info

  # Celery Beat (Scheduler) - Staging
  celery-beat-staging:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile
      target: production
    container_name: 3d_platform_celery_beat_staging
    env_file:
      - ./env.staging
    environment:
      - POSTGRES_SERVER=postgres-staging
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=staging_password_2024!
      - POSTGRES_DB=3d_platform_staging
      - REDIS_URL=redis://redis-staging:6379/0
    depends_on:
      - postgres-staging
      - redis-staging
    networks:
      - staging_network
    restart: unless-stopped
    command: celery -A app.celery_app beat --loglevel=info

  # Flower (Celery Monitoring) - Staging
  flower-staging:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile
      target: production
    container_name: 3d_platform_flower_staging
    environment:
      - REDIS_URL=redis://redis-staging:6379/0
    ports:
      - "5556:5555"  # Different port for staging
    depends_on:
      - redis-staging
    networks:
      - staging_network
    restart: unless-stopped
    command: celery -A app.celery_app flower --port=5555

  # Frontend - Staging
  frontend-staging:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend/Dockerfile
      target: production  # Use production build
      args:
        - REACT_APP_API_URL=http://localhost:8001/api/v1
        - REACT_APP_ENVIRONMENT=staging
    container_name: 3d_platform_frontend_staging
    ports:
      - "3001:80"  # Different port for staging, serve from nginx
    networks:
      - staging_network
    restart: unless-stopped
    depends_on:
      - backend-staging

  # Nginx (Reverse Proxy) - Staging
  nginx-staging:
    image: nginx:alpine
    container_name: 3d_platform_nginx_staging
    ports:
      - "8080:80"   # Main staging access point
      - "8443:443"  # HTTPS for staging
    volumes:
      - ./docker/nginx/staging.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl  # SSL certificates for staging
    depends_on:
      - frontend-staging
      - backend-staging
    networks:
      - staging_network
    restart: unless-stopped

volumes:
  postgres_staging_data:
  redis_staging_data:
  uploads_staging_data:
  output_staging_data:
  temp_staging_data:
  colmap_workspace_staging_data:

networks:
  staging_network:
    driver: bridge
    name: 3d_platform_staging

